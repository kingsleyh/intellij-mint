module ('module')
WHITE_SPACE (' ')
CAPITALISED_IDENT ('Js')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n  ')
fun ('fun')
WHITE_SPACE (' ')
LOWER_IDENT ('generateNewWallet')
WHITE_SPACE (' ')
( ('(')
LOWER_IDENT ('networkPrefix')
WHITE_SPACE (' ')
: (':')
WHITE_SPACE (' ')
CAPITALISED_IDENT ('String')
) (')')
WHITE_SPACE (' ')
: (':')
WHITE_SPACE (' ')
CAPITALISED_IDENT ('Result')
( ('(')
CAPITALISED_IDENT ('Wallet')
. ('.')
CAPITALISED_IDENT ('Error')
, (',')
WHITE_SPACE (' ')
CAPITALISED_IDENT ('Wallet')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n      ')
STRING_LITERAL ('`\n      (() => {\n        try {\n          if (["T0", "M0"].indexOf(networkPrefix) === -1) {\n            return new Err($Wallet_Error_InvalidNetwork)\n          }\n\n          var keyPair = generateValidKeyPair();\n\n          var wallet = {\n            publicKey: keyPair.hexPublicKey,\n            wif: makeWif(keyPair.hexPrivateKey, networkPrefix),\n            address: makeAddress(keyPair.hexPublicKey, networkPrefix)\n          }\n\n          return new Ok(new Record(wallet))\n        } catch (e) {\n          return new Err($Wallet_Error_WalletGenerationError)\n        }\n      })()\n      `')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
fun ('fun')
WHITE_SPACE (' ')
LOWER_IDENT ('encryptWallet')
WHITE_SPACE (' ')
( ('(')
LOWER_IDENT ('wallet')
WHITE_SPACE (' ')
: (':')
WHITE_SPACE (' ')
CAPITALISED_IDENT ('Wallet')
, (',')
WHITE_SPACE (' ')
LOWER_IDENT ('password')
WHITE_SPACE (' ')
: (':')
WHITE_SPACE (' ')
CAPITALISED_IDENT ('String')
) (')')
WHITE_SPACE (' ')
: (':')
WHITE_SPACE (' ')
CAPITALISED_IDENT ('Result')
( ('(')
CAPITALISED_IDENT ('Wallet')
. ('.')
CAPITALISED_IDENT ('Error')
, (',')
WHITE_SPACE (' ')
CAPITALISED_IDENT ('EncryptedWallet')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n      ')
STRING_LITERAL ('`\n      (() => {\n        try {\n          var address = wallet.address;\n          var salt = all_crypto.bcrypt.genSaltSync(10)\n          var hash = all_crypto.bcrypt.hashSync(password, salt)\n\n          var walletJson = JSON.stringify(wallet);\n          var bf = new all_crypto.blowfish(reverseString(hash));\n          var ciphertext = ab2hexstring(bf.encode(walletJson));\n\n          var encryptedWallet = {\n                 source: "kajiki",\n                 ciphertext: ciphertext,\n                 address: address,\n                 salt: salt\n          };\n\n          return new Ok(new Record(encryptedWallet))\n        } catch (e) {\n          return new Err($Wallet_Error_EncryptWalletError)\n        }\n      })()\n      `')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
fun ('fun')
WHITE_SPACE (' ')
LOWER_IDENT ('decryptWallet')
WHITE_SPACE (' ')
( ('(')
LOWER_IDENT ('encryptedWallet')
WHITE_SPACE (' ')
: (':')
WHITE_SPACE (' ')
CAPITALISED_IDENT ('EncryptedWallet')
, (',')
WHITE_SPACE (' ')
LOWER_IDENT ('password')
WHITE_SPACE (' ')
: (':')
WHITE_SPACE (' ')
CAPITALISED_IDENT ('String')
) (')')
WHITE_SPACE (' ')
: (':')
WHITE_SPACE (' ')
CAPITALISED_IDENT ('Result')
( ('(')
CAPITALISED_IDENT ('Wallet')
. ('.')
CAPITALISED_IDENT ('Error')
, (',')
WHITE_SPACE (' ')
CAPITALISED_IDENT ('Wallet')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n      ')
STRING_LITERAL ('`\n      (() => {\n        try {\n          var hash = all_crypto.bcrypt.hashSync(password, encryptedWallet.salt)\n          var bf = new all_crypto.blowfish(reverseString(hash));\n          var binaryCipherText = new Uint8Array(hexstring2ab(encryptedWallet.ciphertext));\n          var wallet = JSON.parse(bf.decode(binaryCipherText));\n\n          return new Ok(new Record(wallet))\n        } catch (e) {\n          return new Err($Wallet_Error_DecryptWalletError)\n        }\n      })()\n      `')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n\n')
} ('}')