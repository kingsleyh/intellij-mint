{
    parserClass='net.mint.MintParser'
    parserUtilClass="net.mint.MintParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    elementTypeHolderClass='net.mint.psi.MintElementTypes'

    elementTypeClass='net.mint.psi.MintElementType'
    tokenTypeClass='net.mint.psi.MintTokenType'

    psiClassPrefix='Mint'
    psiImplClassSuffix='Impl'
    psiPackage='net.mint.psi'
    psiImplPackage='net.mint.psi.impl'

    generateTokenAccessors=false

    tokens = [
        BACKTICK =                           "`"
        LEFT_BRACE =                         "{"
        RIGHT_BRACE =                        "}"
        LEFT_PAREN =                         "("
        RIGHT_PAREN =                        ")"
        LEFT_BRACKET =                       "["
        RIGHT_BRACKET =                      "]"
        PIPE =                               "|"
        DOT =                                "."
        COMMA =                              ","
        EQUAL =                              "="
        EQUAL_EQUAL =                        "=="
        BACKSLASH =                          "\\\\"
        RIGHT_ARROW =                        "=>"
        NOT_EQUAL =                          "!="
        NOT =                                "!"
        LEFT_ARROW =                         "<="
        LESS =                               "<"
        GREATER_EQUAL =                      ">="
        GREATER =                            ">"
        PLUS_EQUAL =                         "+="
        PLUS =                               "+"
        MINUS_GREATER =                      "->"
        FUNCTION_PIPE =                      "|>"
        MINUS =                              "-"
        TIMES =                              "*"
        DIVIDENTE =                          "/"
        MODULO =                             "%"
        ARRAY =                              "[]"
        NAMESPACE =                          "::"
        COLON =                              ":"
        AND_AND =                            "&&"
        AND =                                "&"
        OR_OR =                              "||"
        HASH =                               "#"
        DOLLAR =                             "$"
        QUESTION =                           "?"
        SEMI =                               ";"
        CASE =                               "case"
        DO =                                 "do"
        TRY =                                "try"
        ELSE =                               "else"
        IF =                                 "if"
        TRUE =                               "true"
        FALSE =                              "false"
        AS =                                 "as"
        ENCODE =                             "encode"
        DECODE =                             "decode"
        USING =                              "using"
        PROPERTY =                           "property"
        RECORD =                             "record"
        CATCH =                              "catch"
        COMPONENT =                          "component"
        MODULE =                             "module"
        STORE =                              "store"
        STATE =                              "state"
        PROPERTY =                           "property"
        NEXT =                               "next"
        WHERE =                              "where"
        WITH =                               "with"
        FINALLY                              "finally"
        WHEN =                               "when"
        FUN =                                "fun"
        GET =                                "get"
        USE =                                "use"
        ENUM =                               "enum"
        VOID =                               "void"
        PROVIDER =                           "provider"
        ROUTES =                             "routes"
        CONNECT =                            "connect"
        EXPOSING =                           "exposing"
        STYLE =                              "style"
        SLCOMMENT =                          'regexp:/\*.*'
        MLCOMMENT =                          'regexp:/\*.*\n'
        STRING_LITERAL =                     'regexp:("([^\"\\]|\\.)*")'
        NUMBER_LITERAL =                     'regexp:(\+|\-)?(0b[01_]+|0o[0-7_]+|0x[a-fA-f\d_]+|[\d_]+)(\.[\d_]+)?(e[-+]?[\d_]+)?(_?(i|f|u)(8|16|32|64))?'

        CAPITALISED_IDENT   = "regexp:[A-Z]+\w*"
        LOWER_IDENT         = "regexp:\w+"
        space               = 'regexp:\s+'
    ]
}

program ::= topLevelStatements*

private topLevelStatements ::= topLevelStatement [topLevelStatements]

// This is required to make nonStrictID work - as need an ElementType (LOWER_ID) and a TokenType (LOWER_IDENT)
// nonStrictID doesn't work in Live Preview so replace it with LowerId temporarily while exploring.
LowerId ::= LOWER_IDENT

// Identifiers
qualifiedName ::= namePart ['.' qualifiedName]
namePart ::= CAPITALISED_IDENT

//qualifiedIdentifier ::= identifier ['.' qualifiedIdentifier]
identifier ::= LOWER_IDENT

// Type information
private ofType ::= typePart [ofType]
typePart ::= (qualifiedName | identifier) ('(' typeArgs ')')?

private typeArgs ::= typeArg [',' typeArgs]
typeArg ::= (qualifiedName | identifier) ('(' typeArgs ')')?


// Function arguments
private args ::= arg [',' args]
arg ::=
  identifier ':' ofType

// Statements
topLevelStatement ::=
          ('component' | 'store' | 'module') qualifiedName '{' expressionsOrStatements? '}'
          | 'record' ofType '{' recordItems '}'
          | 'routes' '{' expressionsOrStatements? '}'
          | 'provider' ofType ':' ofType '{' expressionsOrStatements? '}'
          | 'enum' qualifiedName '{' enumArgs? '}'

private expressionsOrStatements ::= expressions | statements

private statements ::= statement [statements]

statement ::=
   'fun' identifier '('? args? ')'? ':' ofType '{' expressionsOrStatements? '}' ['where' '{' expressionsOrStatements? '}']
 | 'get' identifier ':' ofType '{' expressionsOrStatements? '}' ['where' '{' expressionsOrStatements? '}']
 | 'if' '(' expressionsOrStatements ')' '{' expressionsOrStatements '}' 'else' '{' expressionsOrStatements '}'
 | '(' recordItems? ')' ':' ofType '=>' '{' expressionsOrStatements? '}'
 | 'do' '{' expressionsOrStatements? '}' [catches] ['finally' '{' expressionsOrStatements? '}']
 | 'try' '{' expressionsOrStatements? '}' [catches] ['finally' '{' expressionsOrStatements? '}']
 | 'next' '{' recordAssignments? '}'
 | 'connect' qualifiedName 'exposing' '{' exports '}'
 | 'when' '{' expressionsOrStatements? '}'
 | 'with' ofType '{' expressionsOrStatements? '}'
 | 'case' '(' expressionsOrStatements? ')' '{' caseConditions '}'
 | 'state' identifier ':' ofType '=' expressionsOrStatements
 | 'property' identifier ':' ofType '=' expressionsOrStatements
 | 'decode' identifier 'as' ofType
 | 'use' qualifiedName '{' recordAssignments? '}'
 | repeatingRecordAssignments
 | '`'
 | styles

// Routes statement
private routeStatements ::= routeStatement [routeStatements]
routeStatement ::=
   '/' | '*' | identifier | '{' expressionsOrStatements? '}'

// Enum args
private enumArgs ::= enumArg [enumArgs]
enumArg ::= CAPITALISED_IDENT

// Catch
private catches ::= catcher [catches]
catcher ::= 'catch' ofType '=>' identifier '{' expressionsOrStatements? '}'

// Case
private caseConditions ::= caseCondition [ caseConditions]
caseCondition ::= literal? '=>' expressionsOrStatements

// Arrays
private arrayItems ::= arrayItem [',' arrayItems]
arrayItem ::= expressionsOrStatements

// Record Assignments
private repeatingRecordAssignments ::= repeatingRecordAssignment [',' repeatingRecordAssignments]
private repeatingRecordAssignment ::= '{' recordAssignments '}'

private recordAssignments ::= recordAssignment [ ',' recordAssignments]
recordAssignment ::= (identifier '|')? identifier '=' expressionsOrStatements

// Styles
private styles ::= aStyle [styles]
private aStyle ::= 'style' identifier '{' CssStatement? '}'

// Operators
operators ::= ('+' | '-'  | '*'  | '/'  | '%'  | '|'  | '^'
                   | '&'  | '>'  | '>=' | '<'  | '<=' | '==' | '!=' | '=' | '|>'
                   | '!')

ops ::= '&&' | '||'

// Exports (used in connect exposing)
private exports ::= export [',' exports]
private export ::= identifier

// Records
private recordItems ::= recordItem [',' recordItems]
recordItem ::= LOWER_IDENT ':' ofType ('using' STRING_LITERAL)?

// Expressions
private expressions ::= expression [ops? expressions]
expression ::=
   functionCall
  | identifier
  | htmls
  | literal
  | '=' expressionsOrStatements
  | operators expressionsOrStatements
  | 'void'
  | '[' arrayItems ']'
  | '[]'
  | 'next' '{' recordAssignments? '}'
  | 'case' '(' expressionsOrStatements? ')' '{' caseConditions '}'
  | '\'
  | '(' expressionsOrStatements ')'
  | routeStatements
  | 'encode' expressionsOrStatements


// Function Calls
// The :: is for enum call
private functionCall ::= functionCallIdentifiers '::'? ['(' callArgs? ')']
private functionCallIdentifiers ::= functionCallIdentifier ['.' functionCallIdentifiers]
functionCallIdentifier ::= CAPITALISED_IDENT | identifier

// Call Args
private callArgs ::= callArg [',' callArgs]
callArg ::= expressionsOrStatements

// Literals
literal ::= (TRUE
       | FALSE
       | NUMBER_LITERAL
       | STRING_LITERAL)

// HTML
private htmls ::= html [htmls]
html ::= mintTag | tagOpen | tagEmpty | tagClose

private tagOpen ::= '<' tagName? attrList? '>'
private tagEmpty ::= '<' tagName? attrList? '/' '>'
private tagClose ::= '<' '/' tagName '>'
private mintTag ::= '<' '{' expressionsOrStatements? '}' '>'


private attrList ::= (attr)*
private attr ::= attrDoubleQuoted | attrComponent | attrEmpty

private tagValues ::= tagValue [tagValues]
private tagValue ::= identifier
      | expressionsOrStatements

private attrEmpty ::= attrName
private attrComponent ::= attrName '=' '{'? tagValues '}'?
private attrDoubleQuoted ::= attrName? '=' STRING_LITERAL

htmlTag ::= identifier | CAPITALISED_IDENT
tagName ::= htmlTag ('::' htmlTag)?
attrName ::= identifier

// CSS
private CssStatement ::=
     CssDeclarations

private CssBlocks ::= CssBlock [CssBlocks]
private CssBlock ::=
   '&' ':'? '::'? CssProperty (':' '::'? CssProperty)? ','? ['{' CssDeclarations '}']

private CssDeclarations ::= CssDeclaration [CssDeclarations]
CssDeclaration ::=
     CssProperty ':' CssValues ';'
     | CssBlocks


private ids ::= id [ids]
private id ::= identifier | '-' | '::'

private CssProperty ::= ids

private CssValues ::= CssValue [CssValues]
CssValue ::= identifier
         | literal
         | '%'
         | '('
         | ')'
         | '-'
         | '#' CAPITALISED_IDENT? identifier?
         | '.'
         | ':'
         | ','
         | "'"
         | '{' (identifier | literal) '}'