{
    parserClass='net.mint.MintParser'
    parserUtilClass="net.mint.MintParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    elementTypeHolderClass='net.mint.psi.MintElementTypes'

    elementTypeClass='net.mint.psi.MintElementType'
    tokenTypeClass='net.mint.psi.MintTokenType'

    psiClassPrefix='Mint'
    psiImplClassSuffix='Impl'
    psiPackage='net.mint.psi'
    psiImplPackage='net.mint.psi.impl'
    psiImplUtilClass='net.mint.psi.impl.MintPsiImplUtil'

    generateTokenAccessors=false

    tokens = [
        BACKTICK =                           "`"
        LEFT_BRACE =                         "{"
        RIGHT_BRACE =                        "}"
        LEFT_PAREN =                         "("
        RIGHT_PAREN =                        ")"
        LEFT_BRACKET =                       "["
        RIGHT_BRACKET =                      "]"
        PIPE =                               "|"
        DOT =                                "."
        COMMA =                              ","
        EQUAL =                              "="
        EQUAL_EQUAL =                        "=="
        BACKSLASH =                          "\\\\"
        RIGHT_ARROW =                        "=>"
        NOT_EQUAL =                          "!="
        NOT =                                "!"
        LEFT_ARROW =                         "<="
        LESS =                               "<"
        GREATER_EQUAL =                      ">="
        GREATER =                            ">"
        PLUS_EQUAL =                         "+="
        PLUS =                               "+"
        MINUS_GREATER =                      "->"
        FUNCTION_PIPE =                      "|>"
        MINUS =                              "-"
        TIMES =                              "*"
        DIVIDENTE =                          "/"
        MODULO =                             "%"
        ARRAY =                              "[]"
        NAMESPACE =                          "::"
        COLON =                              ":"
        AND_AND =                            "&&"
        AND =                                "&"
        OR_OR =                              "||"
        HASH =                               "#"
        DOLLAR =                             "$"
        QUESTION =                           "?"
        SEMI =                               ";"
        CASE =                               "case"
        SEQUENCE =                           "sequence"
        PARALLEL =                           "parallel"
        TRY =                                "try"
        ELSE =                               "else"
        IF =                                 "if"
        TRUE =                               "true"
        FALSE =                              "false"
        AS =                                 "as"
        ENCODE =                             "encode"
        DECODE =                             "decode"
        USING =                              "using"
        PROPERTY =                           "property"
        RECORD =                             "record"
        CATCH =                              "catch"
        COMPONENT =                          "component"
        MODULE =                             "module"
        STORE =                              "store"
        STATE =                              "state"
        PROPERTY =                           "property"
        NEXT =                               "next"
        WHERE =                              "where"
        WITH =                               "with"
        FINALLY                              "finally"
        WHEN =                               "when"
        FUN =                                "fun"
        GET =                                "get"
        USE =                                "use"
        ENUM =                               "enum"
        VOID =                               "void"
        PROVIDER =                           "provider"
        ROUTES =                             "routes"
        CONNECT =                            "connect"
        EXPOSING =                           "exposing"
        STYLE =                              "style"
        TEST =                               "test"
        SUITE =                              "suite"

        MLCOMMENT =                          "MLCOMMENT"
        STRING_LITERAL =                     "STRING_LITERAL"
        NUMBER_LITERAL =                     "NUMBER_LITERAL"
        CAPITALISED_IDENT =                  "CAPITALISED_IDENT"
    ]
}


//        MLCOMMENT =                          'regexp:/\*.*\n'
//        STRING_LITERAL =                     'regexp:("([^\"\\]|\\.)*")'
//        NUMBER_LITERAL =                     'regexp:(\+|\-)?(0b[01_]+|0o[0-7_]+|0x[a-fA-f\d_]+|[\d_]+)(\.[\d_]+)?(e[-+]?[\d_]+)?(_?(i|f|u)(8|16|32|64))?'
//        CAPITALISED_IDENT   = "regexp:[A-Z]+\w*"
//        identifier         = "regexp:\w+"
//        space               = 'regexp:\s+'

program ::= topLevelStatements*

topLevelStatements ::= topLevelStatement [topLevelStatements]

// Identifiers
identifier ::= LOWER_IDENT {
        implements="net.mint.psi.MintNamedElement"
        mixin="net.mint.psi.impl.MintNamedElementImpl"
        methods=[getNameIdentifier getName setName ] }


qualifiedName ::= properName ['.' qualifiedName]
properName ::= CAPITALISED_IDENT {
                          implements="net.mint.psi.MintNamedElement"
                          mixin="net.mint.psi.impl.MintNamedElementImpl"
                          methods=[getNameIdentifier getName setName] }

// Keywords
keyword ::= 'get' | 'fun'

// Type information
ofType ::= typePart [ofType]
typePart ::= (qualifiedName | identifier) ('(' typeArgs ')')?

typeArgs ::= typeArg [',' typeArgs]
typeArg ::= (qualifiedName | identifier) ('(' typeArgs ')')?


// Function arguments
args ::= arg [',' args]
arg ::=
  <<nonStrictId>> ':' ofType

// Statements
topLevelStatement ::=
          'component' qualifiedName '{' expressionsOrStatements? '}'
          |  storeStatement
          | 'module' qualifiedName '{' expressionsOrStatements? '}'
          | 'record' ofType '{' recordItems '}'
          | 'routes' '{' routeStatements? '}'
          | 'provider' ofType ':' ofType '{' expressionsOrStatements? '}'
          | 'enum' qualifiedName '{' enumArgs? '}'
          | 'suite' literal '{' testStatements? '}'

testStatements ::= testStatement [testStatements]

testStatement ::= 'test' literal '{' expressionsOrStatements? '}'

storeStatement ::= 'store' qualifiedName '{' expressionsOrStatements? '}'

expressionsOrStatements ::= expressions | statements

statements ::= statement [statements]

funOrGetStatement ::= 'fun' <<nonStrictId>> '('? args? ')'? ':' ofType '{' expressionsOrStatements? '}' ['where' '{' expressionsOrStatements? '}']
                       | 'get' <<nonStrictId>> ':' ofType '{' expressionsOrStatements? '}' ['where' '{' expressionsOrStatements? '}']

private elsePart ::=
 'else' 'if'? '(' expressionsOrStatements ')' '{' expressionsOrStatements '}'

private elseParts ::= elsePart [elseParts]

ifElseStatement ::=
   'if' '(' expressionsOrStatements ')' '{' expressionsOrStatements '}' elseParts

statement ::=
 funOrGetStatement
 | ifElseStatement
 | '(' recordItems? ')' ':' ofType '=>' '{' expressionsOrStatements? '}'
 | 'sequence' '{' expressionsOrStatements? '}' [catches] ['finally' '{' expressionsOrStatements? '}']
 | 'parallel' '{' expressionsOrStatements? '}' [catches] ['finally' '{' expressionsOrStatements? '}']
 | 'try' '{' expressionsOrStatements? '}' [catches] ['finally' '{' expressionsOrStatements? '}']
 | 'next' '{' recordAssignments? '}'
 | 'connect' qualifiedName 'exposing' '{' exports '}'
 | 'when' '{' expressionsOrStatements? '}'
 | 'with' ofType '{' expressionsOrStatements? '}'
 | 'case' '(' expressionsOrStatements? ')' '{' caseConditions '}'
 | 'state' <<nonStrictId>> ':' ofType '=' expressionsOrStatements
 | 'property' <<nonStrictId>> ':' ofType '=' expressionsOrStatements
 | 'decode' <<nonStrictId>> 'as' ofType
 | 'use' qualifiedName '{' recordAssignments? '}'
 | repeatingRecordAssignments
 | '`'
 | styles

// Routes statement
routeStatements ::= routeStatement [routeStatements]
routeStatement ::=
   routeParts ['(' recordItems ')'] '{' expressionsOrStatements? '}'

routeParts ::= routePart [routeParts]
routePart ::= '/' | '*' | ':' | identifier

// Enum args
enumArgs ::= enumArg [enumArgs]
enumArg ::= properName

// Catch
catches ::= catcher [catches]
catcher ::= 'catch' [ofType '=>' identifier] '{' expressionsOrStatements? '}'

// Case
caseConditions ::= caseCondition [ caseConditions]
caseCondition ::= literal? '=>' expressionsOrStatements

// Arrays
arrayItems ::= arrayItem [',' arrayItems]
arrayItem ::= expressionsOrStatements

// Record Assignments
repeatingRecordAssignments ::= repeatingRecordAssignment [',' repeatingRecordAssignments]
repeatingRecordAssignment ::= '{' recordAssignments '}'

recordAssignments ::= recordAssignment [ ',' recordAssignments]
recordAssignment ::= (<<nonStrictId>> '|')? <<nonStrictId>> '=' expressionsOrStatements

// Styles
styles ::= aStyle [styles]
aStyle ::= 'style' <<nonStrictId>> '{' CssStatement? '}'

// Operators
operators ::= ('+' | '-'  | '*'  | '/'  | '%'  | '|'  | '^'
                   | '&'  | '>'  | '>=' | '<'  | '<=' | '==' | '!=' | '=' | '|>'
                   | '!')

ops ::= '&&' | '||'

// Exports (used in connect exposing)
exports ::= export [',' exports]
export ::= <<nonStrictId>>

// Records
recordItems ::= recordItem [',' recordItems]
recordItem ::= identifier ':' ofType ('using' STRING_LITERAL)?

// Expressions
expressions ::= expression [ops? expressions]
expression ::=
   functionCall
  | identifier
  | htmls
  | literal
  | '=' expressionsOrStatements
  | operators expressionsOrStatements
  | 'void'
  | '[' arrayItems ']'
  | '[]'
  | 'next' '{' recordAssignments? '}'
  | 'case' '(' expressionsOrStatements? ')' '{' caseConditions '}'
  | '\'
  | '(' expressionsOrStatements ')'
//  | routeStatements
  | 'encode' expressionsOrStatements


// Function Calls
// The :: is for enum call
functionCall ::= functionCallIdentifiers '::'? ['(' callArgs? ')']
functionCallIdentifiers ::= functionCallIdentifier ['.' functionCallIdentifiers]
functionCallIdentifier ::= properName | identifier // need to convert keywords here but not sure how to do it
                                                   // nonStrictId I couldn't get to work. so Http.get will kill the psi tree


// Call Args
callArgs ::= callArg [',' callArgs]
callArg ::= expressionsOrStatements

// Literals
literal ::= (TRUE
       | FALSE
       | NUMBER_LITERAL
       | STRING_LITERAL)

// HTML
htmls ::= html [htmls]
html ::= mintTag | tagOpen | tagEmpty | tagClose

private tagOpen ::= '<' tagName? attrList? '>'
private tagEmpty ::= '<' tagName? attrList? '/' '>'
private tagClose ::= '<' '/' tagName '>'
private mintTag ::= '<' '{' expressionsOrStatements? '}' '>'


private attrList ::= (attr)*
private attr ::= attrDoubleQuoted | attrComponent | attrEmpty

private tagValues ::= tagValue [tagValues]
private tagValue ::= identifier
      | expressionsOrStatements

private attrEmpty ::= attrName
private attrComponent ::= attrName '=' '{'? tagValues '}'?
private attrDoubleQuoted ::= attrName? '=' STRING_LITERAL

htmlTag ::= identifier | properName
tagName ::= htmlTag ('::' htmlTag)?
attrName ::= identifier

// CSS
CssStatement ::=
     CssDeclarations

CssBlocks ::= CssBlock [CssBlocks]
CssBlock ::=
   '&' ':'? '::'? CssProperty (':' '::'? CssProperty)? ','? ['{' CssDeclarations '}']

CssDeclarations ::= CssDeclaration [CssDeclarations]
CssDeclaration ::=
     CssProperty ':' CssValues ';'
     | CssBlocks


private ids ::= id [ids]
private id ::= identifier | '-' | '::'

private CssProperty ::= ids

private CssValues ::= CssValue [CssValues]
CssValue ::= identifier
         | literal
         | '%'
         | '('
         | ')'
         | '-'
         | '#' properName? identifier?
         | '.'
         | ':'
         | ','
         | "'"
         | '{' (identifier | literal) '}'